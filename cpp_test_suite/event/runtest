#!/bin/bash

#
# remove different echo command behaviour on different OS
#
if test "`echo -e xxx`" = "xxx"
then
    echo="echo -e"
else
    echo=echo
fi

if [ $# = 0 ]
then
	$echo "\nusage:  runtest ds_system\n"
	$echo "ds_system can be ubuntu904, python or \"jenkins <dir>\""
	exit 1
fi

#
# test host
#

PYTHON_HOST=controls01
UBUNTU904_HOST=pcantares

HOST=`hostname`
SERV_NAME=devTest


case $1 in
ubuntu904 )
	if [ $HOST != $UBUNTU904_HOST ]
	then
		$echo "For ubuntu904, test should run on "$UBUNTU904_HOST
		exit 1
	fi
	DIR=bin/ubuntu904
	DEV1="dev/test/10"
	DEV2="dev/test/11"
	DEV3="dev/test/12"
	DEV1_ALIAS="et_alias"
	;;
#
python )
	if [ $HOST != $PYTHON_HOST ]
	then
		$echo "For python, test should run on "$PYTHON_HOST
		exit 1
	fi
	DIR=suse93
	;;
#
jenkins )
	if [ $# != 2 ]
	then
		echo "Mising base directory"
		exit -1
	fi
	BASE_DIR=$2
	for i in $NODE_LABELS
	do
		echo $i
		if [ $i = "ubuntu10.04" ]
		then
			echo "Ubuntu 10.04 OS"
			DIR="$BASE_DIR/ubuntu1004/bin"
			DEV1="test/ubuntu1004/10"
			DEV2="test/ubuntu1004/11"
			DEV3="test/ubuntu1004/12"
			DEV1_ALIAS="ubuntu1004_alias"
		fi
	
		if [ $i = "solaris10" ]
		then
			echo "Solaris 10 OS"
			DIR="$BASE_DIR/solaris10_CC/bin"
			DEV1="test/solaris10/10"
			DEV2="test/solaris10/11"
			DEV3="test/solaris10/12"
			DEV1_ALIAS="solaris10_alias"
		fi

		if [ $i = "Windows_VC9" ]
		then
			echo "Windows VC9"
			DIR="$BASE_DIR/win32/bin"
			DEV1="test/win32_vc9/10"
			DEV2="test/win32_vc9/11"
			DEV3="test/win32_vc9/12"
			DEV1_ALIAS="win32_vc9_alias"
		fi

		if [ $i = "redhate5" ]
		then
			echo "redhate 5 OS"
			DIR="$BASE_DIR/redhate5/bin"
		fi
	done
	;;
#
* )
#	$echo "\nunknown system"
#	exit 1
	DIR=bin
	;;
esac

check_return_value () {
if [ $1 != "0" ]
then
	echo "Test Suite FAILED !!!!!!!!!!!!!!!!!!"
	echo "Leaving test suite, try to fix it"
	exit -1
fi
}

#
# First, test device server startup sequence
#

$echo "Testing periodic event"
$DIR/per_event $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting change event and ApiUtil::cleanup() stuff"
$DIR/change_event $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting 64bits data change event"
$DIR/change_event64 $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting event buffers with change events"
$DIR/change_event_buffer $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting archive_event"
$DIR/archive_event $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting user_event (with DevEncoded data type)"
$DIR/user_event $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting multiple callback on same events"
$DIR/multi_event $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting state and status event"
$DIR/state_event $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting attribute configuration event"
$DIR/att_conf_event $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting event buffers with attribute configuration events"
$DIR/att_conf_event_buffer $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting change events with quality change"
$DIR/scan $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting attribute data ready event"
$DIR/data_ready_event $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting event buffers with attribute data ready events"
$DIR/data_ready_event_buffer $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting device locking and event usage within the same process (memory pb at process exit)"
$DIR/event_lock $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting server_event"
$DIR/server_event $DEV1
ret=$?
check_return_value $ret
#
#$echo "\nTesting client reconnection to notifd (help needed)"
#$DIR/reco_event $DEV1
#ret=$?
#check_return_value $ret
#
#$echo "\nTesting server and client reconnection to notifd (help needed)"
#$DIR/reco_svc $DEV1
#ret=$?
#check_return_value $ret
