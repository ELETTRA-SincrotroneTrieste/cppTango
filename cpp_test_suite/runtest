#!/bin/bash

#
# remove different echo command behaviour on different OS
#
if test "`echo -e xxx`" = "xxx"
then
    echo="echo -e"
else
    echo=echo
fi

if [ $# = 0 ]
then
	$echo "\nusage:  runtest ds_system\n"
	$echo "ds_system can be redhate5_64, ubuntu904, python or \"jenkins <dir>\""
	exit 1
fi

#
# test host
#

REDHATE5_64_HOST=esrflinux2-1a
PYTHON_HOST=controls01
UBUNTU904_HOST=pcantares

HOST=`hostname`
SERV_NAME=devTest


case $1 in
redhate5_64 )
	if [ $HOST != $REDHATE5_64_HOST ]
	then
		$echo "For redhate5_64, test should run on "$REDHATE5_64_HOST
		exit 1
	fi
	DIR=bin/redhate5_64
	;;
#
ubuntu904 )
	if [ $HOST != $UBUNTU904_HOST ]
	then
		$echo "For ubuntu 9.04, test should run on "$UBUTU904_HOST
		exit 1
	fi
	DIR=bin/ubuntu904
	DEV1="dev/test/10"
	DEV2="dev/test/11"
	DEV3="dev/test/12"
	DEV1_ALIAS="et_alias"
	;;
#
python )
	if [ $HOST != $PYTHON_HOST ]
	then
		$echo "For python, test should run on "$PYTHON_HOST
		exit 1
	fi
	DIR=suse93
	;;
#
jenkins )
	if [ $# != 2 ]
	then
		echo "Mising base directory"
		exit -1
	fi
	BASE_DIR=$2
	for i in $NODE_LABELS
	do
		echo $i
		if [ $i = "ubuntu10.04" ]
		then
			echo "Ubuntu 10.04 OS"
			DIR="$BASE_DIR/ubuntu1004/bin"
			DEV1="test/ubuntu1004/10"
			DEV2="test/ubuntu1004/11"
			DEV3="test/ubuntu1004/12"
			DEV1_ALIAS="ubuntu1004_alias"
			ATTR_ALIAS="ubuntu1004_attr_alias"
			INST_NAME=ubuntu1004
		fi
	
		if [ $i = "solaris10" ]
		then
			echo "Solaris 10 OS"
			DIR="$BASE_DIR/solaris10_CC/bin"
			DEV1="test/solaris10/10"
			DEV2="test/solaris10/11"
			DEV3="test/solaris10/12"
			DEV1_ALIAS="solaris10_alias"
			ATTR_ALIAS="solaris10_attr_alias"
			INST_NAME=solaris10
		fi

		if [ $i = "Windows_VC9" ]
		then
			echo "Windows VC9"
			DIR="$BASE_DIR/win32/bin"
			DEV1="test/win32_vc9/10"
			DEV2="test/win32_vc9/11"
			DEV3="test/win32_vc9/12"
			DEV1_ALIAS="win32_vc9_alias"
			ATTR_ALIAS="win32_vc9_attr_alias"
			INST_NAME=win32_vc9
		fi
	
		if [ $i = "centos5" ]
		then
			echo "CentOS 5 OS"
			DIR="$BASE_DIR/centos5/bin"
			DEV1="test/centos5/10"
			DEV2="test/centos5/11"
			DEV3="test/centos5/12"
			DEV1_ALIAS="centos5_alias"
			ATTR_ALIAS="centos5_attr_alias"
			INST_NAME=centos5
		fi

		if [ $i = "redhate4" ]
		then
			echo "Red Hat 4 OS"
			DIR="$BASE_DIR/redhate4/bin"
			DEV1="test/redhate4/10"
			DEV2="test/redhate4/11"
			DEV3="test/redhate4/12"
			DEV1_ALIAS="redhate4_alias"
			ATTR_ALIAS="redhate4_attr_alias"
			INST_NAME=redhate4
		fi
	done
	;;
#
* )
	$echo "\nunknown system"
	exit 1
	;;
esac

check_return_value () {
if [ $1 != "0" ]
then
	echo "Test Suite FAILED !!!!!!!!!!!!!!!!!!"
	echo "Leaving test suite, try to fix it"
	exit -1
fi
}

#
# First, test device server startup sequence
#

$echo "Testing miscellaneous DeviceProxy features"
$DIR/misc_devproxy $DEV1 $SERV_NAME/$INST_NAME
ret=$?
check_return_value $ret
#
$echo "\nTesting insertion and extraction into DeviceData objects for all types"
$DIR/cmd_types $DEV1 10
ret=$?
check_return_value $ret

#
$echo "\nTesting extraction from DeviceAttribute objects for all types"
$DIR/attr_types $DEV1 10
ret=$?
check_return_value $ret
#
$echo "\nTesting attribute configuration changes"
$DIR/att_conf $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting miscellaneous DeviceData object features"
$DIR/misc_devdata
ret=$?
check_return_value $ret
#
$echo "\nTesting miscellaneous DeviceAttribute object features"
$DIR/misc_devattr
ret=$?
check_return_value $ret
#
$echo "\nTesting writing attribute (with the eight data types) using DeviceAttribute"
$DIR/write_attr $DEV1 10
ret=$?
check_return_value $ret
#
$echo "\nTesting copy constructor and assignement operator of the DeviceProxy class"
$DIR/copy_devproxy $DEV1 $DEV2 $DEV3
ret=$?
check_return_value $ret
#
$echo "\nTesting object property methods of the Database class"
$DIR/obj_prop
ret=$?
check_return_value $ret
#
$echo "\nTesting command_history and attribute_history DeviceProxy methods"
$DIR/Poll $DEV1
ret=$?
check_return_value $ret
sleep 7
$DIR/read_hist $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting polling of new attribute data types"
$DIR/poll_attr $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting all DeviceProxy polling methods"
$DIR/poll_met $DEV1 $DEV2 $DEV1_ALIAS
$DIR/StopPoll $DEV1
#
$echo "\nTesting all AttributeProxy methods"
$DIR/attr_proxy $DEV1/Short_attr_rw
ret=$?
check_return_value $ret
#
$echo "\nTesting writing spectrum and image attributes"
$DIR/write_attr_3 $DEV1 10
ret=$?
check_return_value $ret
#
$echo "\nTesting polled command with external triggering"
$DIR/read_hist_ext $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting individual polling buffer depth"
$DIR/ring_depth $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting memorized attributes"
$DIR/mem_att $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting state and status read as attributes"
$DIR/state_attr $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting RDS alarm"
$DIR/rds $DEV1
ret=$?
check_return_value $ret
#
$echo "\nTesting Device Server Cache"
$DIR/ds_cache
ret=$?
check_return_value $ret
#
$echo "\nTesting Write_Read attribute"
$DIR/w_r_attr $DEV1
ret=$?
check_return_value $ret
#
if [ $1 = "jenkins" ]
then
	PATH=$PATH:$DIR
else
	PATH=$PATH:./$DIR
fi
if [ $INST_NAME != "win32_vc9" ]
then
	$echo "\nTesting device locking feature"
	$DIR/lock $DEV1 $DEV2
	ret=$?
	check_return_value $ret
fi
#
$echo "\nTesting the sub device diagnostics"
$DIR/sub_dev $DEV1 $DEV2 $DEV3
ret=$?
check_return_value $ret
#
$echo "\nTesting miscellaneous device name syntax"
$DIR/syntax $DEV1 $DEV2 $DEV1_ALIAS $ATTR_ALIAS
ret=$?
check_return_value $ret
#
$echo "\nTesting printing operators"
$DIR/print_data $DEV1
ret=$?
check_return_value $ret
#
if [ $INST_NAME = "ubuntu1004" ]
then
	$echo "\nCheck user classes size"
	$DIR/size
	ret=$?
	check_return_value $ret
fi
#
$echo "\nTesting resetting attribute event conf. reset (need notifd...)"
$DIR/ConfEventBugClient $DEV3
ret=$?
check_return_value $ret
#
#	Now, test asynchronous features
#
cd asyn;./runtest $*
#
#
#	Now, test events
#
cd ../event;./runtest $*

