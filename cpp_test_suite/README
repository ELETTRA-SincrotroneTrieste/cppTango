Tango Test Suite
----------------

This file consists of two sections:

1. User
2. Developer

1. User
-------

1.1. Compilation
1.2. Execution

1.1. Compilation
----------------

The Test Suite currently comprises a set of independent executables examining different Tango features and one
executable utilising CxxTest framework, which consists of test suites conforming to unit test standard.

The source code of the independent executables is located in the following directories:
- asyn
- event
- old_tests

The source code of the CxxTest test suites resides in:
- new_tests

The source files are required to have '.cpp' extension and unique names. The files being a part of the CxxTest
framework must have a 'cxx_' prefix.

To compile the binaries you need to:

1.1.1. Create a profile file
1.1.2. Execute `make profile=myprofile`

1.1.1. Create a profile file
----------------------------

Go to 'makeprofiles' directory, copy the 'default.profile' file and rename it (to e.g. 'myprofile.profile').
Open 'makeprofiles/myprofile.profile' file and define parameters. In this file you indicate paths to 'include' and 'lib'
directories required to run the test suite. There are two sets of parameters: mandatory and optional. Acquaint yourself
with the comments section in 'makeprofiles/default.profile' file to fully understand the meaning of the parameters.

Below there is a brief tutorial on how to set the parameters:

Define TANGO_BASE, OMNI_BASE, LOG4TANGO_BASE, ZMQ_BASE indicating the directories which contain 'include' and 'lib'
folders for Tango, omniORB, log4tango and ZMQ libraries.
If your Tango 'include' or 'lib' directories are different then TANGO_BASE/include or TANGO_BASE/lib define
TANGO_INCLUDE_DIR or TANGO_LIB_DIR which will take precedence over TANGO_BASE/include or TANGO_BASE/lib respectively.
Defining TANGO_INCLUDE_DIR you can provide more than one directory.

By default all files from the following directories will be compiled:
- asyn
- event
- old_tests
- new_tests
The '*.o' object files will be stored in 'obj' directory and the binaries in the 'bin' directory.
If you want to:
- modify the output directories, define OBJ_DIR and BIN_DIR parameters;
- add a directory containing extra files to compile, define TEST_DIRS_EXTRA;
- compile files only from the selected directories, define TEST_DIRS;

All files prefixed with 'cxx_' will be compiled into one executable named 'runner' in the alphabetical order.

If you wish to compile only the runner, define TEST_DIRS indicating only the folder containing the 'cxx_' files.

You can also compile exclusive files of your choice by listing them in COMPILE_FILES parameter (both the independent
ones and the 'cxx_' files). In such case, the 'cxx_' files will be compiled into the 'runner' executable in the
provided order. To bring back the alphabetical order, set 'SORT_ALPHABETICALLY_CXX = true'.

If there are any files you want to exclude from compilation list them in EXCLUDE_FILES property.

By default 'c++' compiler is used. To choose a different one, redefine the CC property.

If you need to add some extra compiler parameters on top of the default ones (-g -Wall -Wextra -DVALGRIND -D_PTHREADS
-D_REENTRANT) list them in CXXFLAGS_EXTRA property. To totally redefine the compiler parameters set CXXFLAGS.

To add extra linker options use LFLAGS_EXTRA.

1.1.2. Execute `make profile=myprofile`
---------------------------------------

After configuring the 'myprofile.profile' file, to compile the test suite binaries it is enough to execute:
- `make profile=myprofile`
The profile name 'myprofile' is the name of the '.profile' file created in the previous step.
Executing mere `make` will load the 'default.profile' settings.

1.2. Execution
--------------

Use 'runtest' script to execute all test suites.
You can also call each executable independently.

2. Developer
------------

This part is a guide to test suites development with the use of the CxxTest framework.

2.1 Create a new test suite
---------------------------

To create a new test suite simply copy and rename the 'cxx_template.cpp' file which can be found in the 'new_tests'
directory.

Modify the header guard 'TemplateTestSuite_h' (lines 1, 2 and the last one) by providing your test suite name. Follow
the convention: if you name your file 'cxx_my_test.cpp' the header guard should take this form - 'MyTestTestSuite_h'.

Define the test suite class name replacing 'TemplateTestSuite' (lines 15 and 17). Follow the convention (above example
case: 'MyTestTestSuite').

In the 'Arguments check' section define what command line arguments should be provided if your test suites are dependent
on user configuration (like device names or loop repetitions).
Some test suites require arguments which are common for all (e.g. the database server name), for this reason they have
been predefined; however some other test suites need custom arguments (like a device name on which to execute an
instruction) hence there are 3 types of arguments distinguished:
- uargs (user arguments) - these are the test suite custom arguments which are not predefined within the CxxTest
  framework; read from the command line and assigned in the order of appearance, e.g.:
  `./runner my_arg1 my_arg2 my_arg3`
- params (predefined parameters) - commonly used in all test suites, like database server name, full device server name
  etc.; they are provided in the command line as follows: '--' + parameter name + '=' + parameter value, e.g.:
  `./runner --fulldsname=my/dsname --dbserver=sys/database/2`
- params_opt (optional parameters) - same as params but not required by the test suite (like a loop parameter); they
  are provided in the command line the same way as params but processed by the test suite in a different (optional) way
  `./runner --loop=5`
To declare an argument and obtain its value use the following methods, e.g.:
- std::string my_uarg_value = CxxTest::TangoPrinter::get_uarg("my_uarg","description of my_uarg"); or
  std::string my_uarg_value = CxxTest::TangoPrinter::get_uarg("my_uarg");
  this will define a user argument named 'my_uarg' description of which is optional; if the user calls 'runner' with the
  following arguments:
  `./runner arg1 arg2 arg3`
  'my_uarg' value will be 'arg1'; in this case, arguments 'arg2' and 'arg3' will be ignored; to obtain values of more
  user arguments call the method multiple times, e.g.:
  std::string my_uarg1_value = CxxTest::TangoPrinter::get_uarg("my_uarg1","description of my_uarg1");
  std::string my_uarg2_value = CxxTest::TangoPrinter::get_uarg("my_uarg2","description of my_uarg2");
  std::string my_uarg3_value = CxxTest::TangoPrinter::get_uarg("my_uarg3","description of my_uarg3");
  now, executing:
  `./runner arg1 arg2 arg3`
  will result in 'my_uarg1_value = "arg1"', 'my_uarg2_value = "arg2"' and 'my_uarg3_value = "arg3"';
  if the user executes the 'runner' without providing sufficient number of user arguments, the 'runner' will not execute
  and inform the user of the proper use, printing out all expected user arguments and their descriptions (if not
  provided, the default description is printed out);
- std::string my_param_value = CxxTest::TangoPrinter::get_param("my_param"); 
- std::string my_param_opt_value = CxxTest::TangoPrinter::get_param_opt("my_param_opt"); 





