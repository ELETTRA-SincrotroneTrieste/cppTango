#!/bin/bash

UX_INSTALL_DIR=/tmp/ci
WIN_INSTALL_DIR="C:\tango_src\ci"
WIN_CYGWIN_INSTALL_DIR="/cygdrive/c/tango_src/ci"

DS_NAME=devTest

#
# Is clean required ?
#

if [ $# = 1 ]
then
	if [ $1 = "clean" ]
	then
		CLEAN="clean"
	fi
fi

#
# Set some variables according to OS
#

for i in $NODE_LABELS
do
	echo $i
	if [ $i = "ubuntu10.04" ]
	then
		echo "Ubuntu 10.04 OS"
		OS_TYPE="linux"
		OS_SPEC="linux=1 ubuntu=1"
		BIN_DIR="ubuntu1004"
		MAKE_PATH="make"
		DS_INST_NAME=ubuntu1004
		DS_INST_NAME_2=ubuntu1004_2
		INSTALL_DIR=$UX_INSTALL_DIR
	fi
	
	if [ $i = "solaris10" ]
	then
		echo "Solaris 10 OS"
		OS_TYPE="solaris"
		OS_SPEC="_solaris=1"
		BIN_DIR="solaris10_CC"
		MAKE_PATH="/usr/local/bin/make"
		DS_INST_NAME=solaris10
		DS_INST_NAME_2=solaris10_2
		INSTALL_DIR=$UX_INSTALL_DIR
	fi

	if [ $i = "Windows_VC9" ]
	then
		echo "Windows VC9"
		OS_TYPE="Windows"
		OS_SPEC="Windows"
		MAKE_PATH="devenv"
		DS_INST_NAME=win32_vc9
		DS_INST_NAME_2=win32_vc9_2
		INSTALL_DIR=$WIN_INSTALL_DIR
		BIN_DIR="win32"
		OUTFILE="devenv_suite"
	fi

	if [ $i = "Windows_VC10" ]
	then
		echo "Windows VC10 (64 bits)"
		OS_TYPE="Windows"
		OS_SPEC="Windows_64_VC10"
		MAKE_PATH="MSBuild.exe"
		DS_INST_NAME=win64_vc10
		DS_INST_NAME_2=win64_vc10_2
		INSTALL_DIR=$WIN_INSTALL_DIR
		BIN_DIR="win64"
		OUTFILE="msbuild_suite"
	fi
	
	if [ $i = "centos5" ]
	then
		echo "Centos 5 OS"
		OS_TYPE="linux"
		OS_SPEC="linux=1"
		BIN_DIR="centos5"
		MAKE_PATH="make"
		DS_INST_NAME=centos5
		DS_INST_NAME_2=centos5_2
		INSTALL_DIR=$UX_INSTALL_DIR
	fi

	if [ $i = "redhate4" ]
	then
		echo "Red Hat 4 OS"
		OS_TYPE="linux"
		OS_SPEC="linux=1"
		BIN_DIR="redhate4"
		MAKE_PATH="make"
		DS_INST_NAME=redhate4
		DS_INST_NAME_2=redhate4_2
		INSTALL_DIR=$UX_INSTALL_DIR
	fi

	if [ $i = "redhate5" ]
	then
		echo "Red Hat 5 OS (64 bits)"
		OS_TYPE="linux"
		OS_SPEC="linux=1"
		BIN_DIR="redhate5"
		MAKE_PATH="make"
		DS_INST_NAME=redhate5
		DS_INST_NAME_2=redhate5_2
		INSTALL_DIR=$UX_INSTALL_DIR
	fi

	if [ $i = "debian6" ]
	then
		echo "Debian 6 OS (64 bits)"
		OS_TYPE="linux"
		OS_SPEC="linux=1"
		BIN_DIR="debian6"
		MAKE_PATH="make"
		DS_INST_NAME=debian6
		DS_INST_NAME_2=debian6_2
		INSTALL_DIR=$UX_INSTALL_DIR
	fi
done

#
# Build make command
#

if [ $OS_TYPE = "Windows" ]
then
	if [ -z $CLEAN ]
	then
		if [ $OS_SPEC = "Windows_64_VC10" ]
		then
			BUILD="Build"
		else
			BUILD="/build"
		fi
	else
		if [ $OS_SPEC = "Windows_64_VC10" ]
		then
			BUILD="Clean;Build"
		else
			BUILD="/rebuild"
		fi
	fi
	export PREFIX=$INSTALL_DIR
	if [ $OS_SPEC = "Windows_64_VC10" ]
	then
		MAKE_CMD="$MAKE_PATH test_suite.sln /m /p:Platform=x64 /t:$BUILD /p:Configuration=Release /v:quiet /flp:LogFile=$OUTFILE;Summary;ShowCommandLine;Verbosity=minimal"
		export PATH=$PATH:/cygdrive/c/Windows/Microsoft.Net/Framework64/v4.0.30319
		cd cpp_test_suite/win64/vc10/test_suite
	else
		MAKE_CMD="$MAKE_PATH test_suite.sln $BUILD Release /out $OUTFILE "
		export PATH=$PATH:/cygdrive/c/Program\ Files/Microsoft\ Visual\ Studio\ 9.0/Common7/IDE
		cd cpp_test_suite/win32/vc9/test_suite
	fi
	PATH=$PATH:/bin
	echo $PATH
	rm -f $OUTFILE
else
	MAKE_CMD="$MAKE_PATH prefix=$INSTALL_DIR $OS_SPEC $CLEAN all"
	cd cpp_test_suite
fi

#
# Create runner_on_demand script
#

if [ $OS_TYPE != "Windows" ]
then
	RUNNER_ON_DEMAND=$INSTALL_DIR/$BIN_DIR/bin/runner_on_demand
	CURRENT_PATH=`pwd`
	
	if [ -f $RUNNER_ON_DEMAND ]
	then
		rm -f $RUNNER_ON_DEMAND
	fi
	
	echo "#!/bin/bash" > $RUNNER_ON_DEMAND
	echo "export LD_LIBRARY_PATH=$INSTALL_DIR/$BIN_DIR/lib/debug:/segfs/tango/tools/log4tango-release/log4tango4.0.4/$BIN_DIR/lib:/segfs/tango/ORB/omniORB4.1.5/$BIN_DIR/lib:$LD_LIBRARY_PATH" >> $RUNNER_ON_DEMAND 
	echo "export TANGO_HOST=kidiboo:10000" >> $RUNNER_ON_DEMAND
	echo "export TEST_SUITE_PATH=$CURRENT_PATH/test_suite" >> $RUNNER_ON_DEMAND
	echo "cd $CURRENT_PATH/test_suite" >> $RUNNER_ON_DEMAND
	echo "$MAKE_PATH test_suites=\"\$*\" prefix=$INSTALL_DIR $OS_SPEC $CLEAN runner_on_demand" >> $RUNNER_ON_DEMAND
fi

#
# Run make
# Only one solution in Windows but 4 make in 4 directories for non-windows OS
#

echo $MAKE_CMD
$MAKE_CMD
RET=$?

if [ $OS_TYPE = "Windows" ]
then
	cat $OUTFILE
	cd ../../..
fi

if [ $RET != 0 ]
then
	echo "Build fail!!!"
	exit -1
fi

if [ $OS_TYPE != "Windows" ]
then
	cd test_suite
	echo $MAKE_CMD
	$MAKE_CMD
	RET=$?
	if [ $RET != 0 ]
	then
		exit -1
	fi

	cd ../asyn
	echo $MAKE_CMD
	$MAKE_CMD
	RET=$?
	if [ $RET != 0 ]
	then
		exit -1
	fi

	cd ../event
	echo $MAKE_CMD
	$MAKE_CMD
	RET=$?
	if [ $RET != 0 ]
	then
		exit -1
	fi
	cd ..
fi

#
# Now Start the first device server
#

TANGO_LIB=$INSTALL_DIR/$BIN_DIR/lib/debug
LOG4TANGO_LIB=/segfs/tango/tools/log4tango-release/log4tango4.0.5/$BIN_DIR/lib
ORB_LIB=/segfs/tango/ORB/omniORB4.1.6/$BIN_DIR/lib
ZMQ_LIB=/segfs/tango/transport/zmq/$BIN_DIR/lib

export LD_LIBRARY_PATH=$TANGO_LIB:$LOG4TANGO_LIB:$ORB_LIB:$ZMQ_LIB:$LD_LIBRARY_PATH
export TANGO_HOST=kidiboo:10000

if [ $OS_TYPE = "Windows" ]
then
	$WIN_CYGWIN_INSTALL_DIR/$BIN_DIR/bin/archive/$DS_NAME $DS_INST_NAME  1>/dev/null 2>&1 &
	$WIN_CYGWIN_INSTALL_DIR/$BIN_DIR/bin/archive/$DS_NAME $DS_INST_NAME_2  1>/dev/null 2>&1 &
else
	echo "Shared libs used by device server"
	ldd $INSTALL_DIR/$BIN_DIR/bin/shared/$DS_NAME
	$INSTALL_DIR/$BIN_DIR/bin/shared/$DS_NAME $DS_INST_NAME 1>/dev/null 2>&1 &
	$INSTALL_DIR/$BIN_DIR/bin/shared/$DS_NAME $DS_INST_NAME_2 1>/dev/null 2>&1 &
fi

#
# Wait before starting test
#

sleep 7
ps -ef | grep devTest

#
# Start test
#

if [ $OS_TYPE = "Windows" ]
then
	INSTALL_DIR=$WIN_CYGWIN_INSTALL_DIR
fi

./runtest jenkins $INSTALL_DIR
RET=$?

#
# kill the servers
#

PIDS=`ps -e | grep $DS_NAME | grep -v grep | awk '{print $1}'`
echo "PIDS = $PIDS"
for pid in $PIDS
do
	echo "Killing process with PID $pid"
	kill $pid
done

exit $RET
